// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketManager.API.Persistence;

#nullable disable

namespace TicketManager.API.Migrations
{
    [DbContext(typeof(TicketManagerDbContext))]
    [Migration("20240102212758_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketManager.Domain.Models.Application", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DeveloperID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Name");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeveloperID");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Credentials", b =>
                {
                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailAddress");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Customer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CredentialsMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("DeveloperID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CredentialsMailAddress");

                    b.HasIndex("DeveloperID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Developer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CredentialsMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CredentialsMailAddress");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Ticket", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DeveloperID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationName");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeveloperID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Application", b =>
                {
                    b.HasOne("TicketManager.Domain.Models.Customer", null)
                        .WithMany("Applications")
                        .HasForeignKey("CustomerID");

                    b.HasOne("TicketManager.Domain.Models.Developer", null)
                        .WithMany("Applications")
                        .HasForeignKey("DeveloperID");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Customer", b =>
                {
                    b.HasOne("TicketManager.Domain.Models.Credentials", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialsMailAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketManager.Domain.Models.Developer", "Developer")
                        .WithMany("Customers")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Developer", b =>
                {
                    b.HasOne("TicketManager.Domain.Models.Credentials", "Credentials")
                        .WithMany()
                        .HasForeignKey("CredentialsMailAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Ticket", b =>
                {
                    b.HasOne("TicketManager.Domain.Models.Application", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketManager.Domain.Models.Customer", null)
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketManager.Domain.Models.Developer", null)
                        .WithMany("Tickets")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Customer", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketManager.Domain.Models.Developer", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Customers");

                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
